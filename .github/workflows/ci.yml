name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        service: [customers-service, transactions-service]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '${{ matrix.service }}/package-lock.json'

    - name: Install dependencies
      run: |
        cd ${{ matrix.service }}
        npm ci

    - name: Generate Prisma Client
      run: |
        cd ${{ matrix.service }}
        npm run db:generate
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"

    - name: Run linting
      run: |
        cd ${{ matrix.service }}
        npm run lint || echo "Linting failed but continuing..."
      continue-on-error: true

    - name: Run unit tests
      run: |
        cd ${{ matrix.service }}
        npm test
      env:
        NODE_ENV: test
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"

    - name: Run tests with coverage
      run: |
        cd ${{ matrix.service }}
        npx jest --coverage
      env:
        NODE_ENV: test
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./${{ matrix.service }}/coverage/lcov.info
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage
      continue-on-error: true

    - name: Build application
      run: |
        cd ${{ matrix.service }}
        npm run build

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies for both services
      run: |
        cd customers-service && npm ci
        cd ../transactions-service && npm ci

    - name: Generate Prisma Clients
      run: |
        cd customers-service && npm run db:generate
        cd ../transactions-service && npm run db:generate

    - name: Run integration tests
      run: |
        cd customers-service && npm run test:integration
        cd ../transactions-service && npm run test:integration

  e2e-tests:
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Run E2E tests
      run: |
        cd tests
        npm ci
        npm run test:e2e

    - name: Cleanup
      if: always()
      run: |
        docker-compose -f tests/docker-compose.test.yml down -v

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Run security audit
      run: |
        cd customers-service && npm audit --audit-level moderate
        cd ../transactions-service && npm audit --audit-level moderate

  quality-gates:
    runs-on: ubuntu-latest
    needs: [test, integration-tests, e2e-tests, security-scan]
    if: always()

    steps:
    - name: Check test results
      run: |
        echo "Test result: ${{ needs.test.result }}"
        echo "Integration tests result: ${{ needs.integration-tests.result }}"
        echo "E2E tests result: ${{ needs.e2e-tests.result }}"
        echo "Security scan result: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "Unit tests failed"
          exit 1
        fi
        if [[ "${{ needs.integration-tests.result }}" != "success" && "${{ needs.integration-tests.result }}" != "skipped" ]]; then
          echo "Integration tests failed"
          exit 1
        fi
        if [[ "${{ needs.e2e-tests.result }}" != "success" && "${{ needs.e2e-tests.result }}" != "skipped" ]]; then
          echo "E2E tests failed"
          exit 1
        fi
        if [[ "${{ needs.security-scan.result }}" != "success" && "${{ needs.security-scan.result }}" != "skipped" ]]; then
          echo "Security scan failed"
          exit 1
        fi
        echo "All quality gates passed!"